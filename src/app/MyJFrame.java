/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package app;

//import static app.JDialog_CreateProject.oblast;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;



/**
 *
 * @author 655
 6/09/2015
 При нажатии на кнопку Таксономии, загружаем данные из БД таксономий строим графические связи.
  - считываем каждую группу отношений в класс MyTaks.
  - считываем все множество групп в класс MyTaksArray.
  - отрисовываем связи отношения Таксономии.
 * 
 */
public class MyJFrame extends javax.swing.JFrame {
   // public static MyProject myProject;
    private static final long serialVersionUID = 1111L;
    //размер окна Таксономии
    public static Dimension windowTaks,windowKompoz,windowTopolog;
    //Кнопка выбора действия
    private static String deystvie="";
    //public ArrayList()  myProjectArray = new  ArrayList();
    /**Указывает выбор панели пиктограмм фигур workJToolBar*/
    private static String work;
    /**Скопированные объекты Таксономии*/
    private static MyTaksArray myTaksArrayCopy;
     /**Класс Скопированные объекты Таксономии заполнен данными*/
    public static boolean  myTaksArrayCopyPassed;
    /**Класс Скопированные объекты Таксономии для удаления заполнен данными*/
    public static boolean  myTaksArrayDeletePassed;
    /**Скопированные объекты Композиции*/
    private static MyComposArray myComposArrayCopy;
     /**Класс Скопированные объекты Композиции заполнен данными*/
    public static boolean  myComposArrayCopyPassed;
     /**Класс Скопированные объекты Композиции для удаления заполнен данными*/
    public static boolean  myComposArrayDeletePassed;
    /**Индикатор использования Вставки скопированного фрагмента*/
    public static boolean  pasteMakeGroupPassed;
    
    
    
    
    
    public MyJFrame() {
        //this.close_jButton = new javax.swing.JButton();
        
        initComponents();
        //ImageIcon image = new ImageIcon("/app/icon/logo_v1.png");//заменим чашку кофев углу окна
        //this.setIconImage(image.getImage());
        windowTaks=new Dimension();
        windowKompoz=new Dimension();
        windowTopolog=new Dimension();
        if(MyJFrame.strelkaUkazatel.isSelected())work="Стрелка-указатель";//значение по-умолчанию
        myTaksArrayCopy=new MyTaksArray();
        myTaksArrayCopyPassed=false;//класс копирования пуст
        myTaksArrayDeletePassed=false;//класс копирования для удаления не выбран
        myComposArrayCopy =new MyComposArray();
        myComposArrayCopyPassed=false;//класс копирования пуст
        myComposArrayDeletePassed=false;//класс копирования для удаления не выбран
        pasteMakeGroupPassed=false;//по-умолчанию ничего не вставляется
        //ImageIcon image = new ImageIcon("src/app/icon/logo_v1.png");//заменим чашку кофев углу окна
        //setIconImage(image.getImage()); //заменим чашку кофев углу окна
        //setIconImage(new ImageIcon("src/app/icon/logo_v1.png").getImage()); //заменим чашку кофев углу окна
        this.addWindowListener(new WindowAdapter(){//обработка закрытия окна
                public void windowClosing(WindowEvent e){
                    
                    exit();
                }
            });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem5 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem15 = new javax.swing.JMenuItem();
        buttonGroupProject = new javax.swing.ButtonGroup();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItem17 = new javax.swing.JMenuItem();
        instrumentBottonGroup = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        fileChooserCSV = new javax.swing.JFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        createProject = new javax.swing.JButton();
        openBotton = new javax.swing.JButton();
        saveProjectJButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        copyJButton = new javax.swing.JButton();
        pastejButton = new javax.swing.JButton();
        deletejButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jToolBar4 = new javax.swing.JToolBar();
        jLabel2 = new javax.swing.JLabel();
        pNamejLabel = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jLabel4 = new javax.swing.JLabel();
        pOblastjLabel = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        jLabel5 = new javax.swing.JLabel();
        pAvtorjLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        workJToolBar = new javax.swing.JToolBar();
        strelkaUkazatel = new javax.swing.JToggleButton();
        krug = new javax.swing.JToggleButton();
        liniyaTaks = new javax.swing.JToggleButton();
        liniyaCompos = new javax.swing.JToggleButton();
        liniyaState = new javax.swing.JToggleButton();
        time = new javax.swing.JToggleButton();
        dispLinejLabel = new javax.swing.JLabel();
        viewjToolBar = new javax.swing.JToolBar();
        positionedTree = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        ontoModelMenu = new javax.swing.JMenu();
        Create = new javax.swing.JMenuItem();
        Open = new javax.swing.JMenuItem();
        closeProjectJMenuItem18 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        saveProjectJMenuItem = new javax.swing.JMenuItem();
        saveAsProject = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        property = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        inport = new javax.swing.JMenu();
        import1 = new javax.swing.JMenu();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        impotrFromCSV = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem26 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem27 = new javax.swing.JMenuItem();
        exportToCSV = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem30 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();

        jMenuItem5.setText("jMenuItem5");

        jMenuItem15.setText("Выход");
        jPopupMenu1.add(jMenuItem15);

        jMenuItem17.setText("jMenuItem17");
        jPopupMenu2.add(jMenuItem17);

        fileChooser.setDialogTitle("Открыть проект IDEF5");

        fileChooserCSV.setDialogTitle("Импорт из  .csv");
        fileChooserCSV.setFileFilter(new MyCustomFilterCSV());

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(app.App.name+" "+app.App.release);

        jToolBar1.setRollover(true);

        createProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/create.png"))); // NOI18N
        createProject.setToolTipText("");
        createProject.setFocusable(false);
        createProject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createProject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createProjectActionPerformed(evt);
            }
        });
        jToolBar1.add(createProject);

        openBotton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/open.png"))); // NOI18N
        openBotton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBottonActionPerformed(evt);
            }
        });
        jToolBar1.add(openBotton);

        saveProjectJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/save.png"))); // NOI18N
        saveProjectJButton.setEnabled(false);
        saveProjectJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectJButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveProjectJButton);
        jToolBar1.add(jSeparator1);

        copyJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/copy.png"))); // NOI18N
        copyJButton.setEnabled(false);
        copyJButton.setFocusable(false);
        copyJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        copyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyJButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(copyJButton);

        pastejButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/paste.png"))); // NOI18N
        pastejButton.setEnabled(false);
        pastejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pastejButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(pastejButton);

        deletejButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/delete.png"))); // NOI18N
        deletejButton.setEnabled(false);
        deletejButton.setFocusable(false);
        deletejButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deletejButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deletejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletejButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(deletejButton);
        jToolBar1.add(jSeparator2);

        jToolBar4.setRollover(true);
        jToolBar4.setToolTipText("Информация.");
        jToolBar4.setName("bvz"); // NOI18N

        jLabel2.setText("Проект: ");
        jLabel2.setEnabled(false);
        jToolBar4.add(jLabel2);

        pNamejLabel.setText("                                        ");
        jToolBar4.add(pNamejLabel);
        jToolBar4.add(jSeparator7);

        jLabel4.setText("Предметная область:");
        jLabel4.setEnabled(false);
        jToolBar4.add(jLabel4);

        pOblastjLabel.setText("                                    ");
        jToolBar4.add(pOblastjLabel);
        jToolBar4.add(jSeparator8);

        jLabel5.setText("Автор:");
        jLabel5.setEnabled(false);
        jToolBar4.add(jLabel5);

        pAvtorjLabel.setText("                                    ");
        jToolBar4.add(pAvtorjLabel);

        //jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setInheritsPopupMenu(true);
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTabbedPane1MousePressed(evt);
            }
        });

        workJToolBar.setRollover(true);

        instrumentBottonGroup.add(strelkaUkazatel);
        strelkaUkazatel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/peredvig.png"))); // NOI18N
        strelkaUkazatel.setSelected(true);
        strelkaUkazatel.setEnabled(false);
        strelkaUkazatel.setFocusable(false);
        strelkaUkazatel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        strelkaUkazatel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        strelkaUkazatel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strelkaUkazatelActionPerformed(evt);
            }
        });
        workJToolBar.add(strelkaUkazatel);

        instrumentBottonGroup.add(krug);
        krug.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/krug.png"))); // NOI18N
        krug.setToolTipText("Символ класса/элемента");
        krug.setEnabled(false);
        krug.setFocusable(false);
        krug.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        krug.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        krug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                krugActionPerformed(evt);
            }
        });
        workJToolBar.add(krug);

        instrumentBottonGroup.add(liniyaTaks);
        liniyaTaks.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/myline2.png"))); // NOI18N
        liniyaTaks.setMnemonic('\u041b');
        liniyaTaks.setToolTipText("Метка отношения");
        liniyaTaks.setEnabled(false);
        liniyaTaks.setFocusable(false);
        liniyaTaks.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        liniyaTaks.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        liniyaTaks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                liniyaTaksActionPerformed(evt);
            }
        });
        workJToolBar.add(liniyaTaks);

        instrumentBottonGroup.add(liniyaCompos);
        liniyaCompos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/mylineCompos.png"))); // NOI18N
        liniyaCompos.setMnemonic('\u041b');
        liniyaCompos.setToolTipText("Метка отношения");
        liniyaCompos.setEnabled(false);
        liniyaCompos.setFocusable(false);
        liniyaCompos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        liniyaCompos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        liniyaCompos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                liniyaComposActionPerformed(evt);
            }
        });
        workJToolBar.add(liniyaCompos);

        instrumentBottonGroup.add(liniyaState);
        liniyaState.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/mylineState.png"))); // NOI18N
        liniyaState.setToolTipText("Стрелка изменения");
        liniyaState.setEnabled(false);
        liniyaState.setFocusable(false);
        liniyaState.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        liniyaState.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        liniyaState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                liniyaStateActionPerformed(evt);
            }
        });
        workJToolBar.add(liniyaState);

        instrumentBottonGroup.add(time);
        time.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/time.png"))); // NOI18N
        time.setToolTipText("Метка времени");
        time.setEnabled(false);
        time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeActionPerformed(evt);
            }
        });
        workJToolBar.add(time);

        dispLinejLabel.setText("                    ");

        viewjToolBar.setRollover(true);

        positionedTree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/graf.png"))); // NOI18N
        positionedTree.setEnabled(false);
        positionedTree.setFocusable(false);
        positionedTree.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        positionedTree.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        positionedTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionedTreeActionPerformed(evt);
            }
        });
        viewjToolBar.add(positionedTree);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/zvezd.png"))); // NOI18N
        jButton2.setEnabled(false);
        viewjToolBar.add(jButton2);

        jMenuBar1.setAutoscrolls(true);

        ontoModelMenu.setText("ОнтоМодель");
        ontoModelMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ontoModelMenuActionPerformed(evt);
            }
        });

        Create.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        Create.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/create.png"))); // NOI18N
        Create.setText("New...");
        Create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateActionPerformed(evt);
            }
        });
        ontoModelMenu.add(Create);

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/open.png"))); // NOI18N
        Open.setText("Open...");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        ontoModelMenu.add(Open);

        closeProjectJMenuItem18.setText("Close");
        closeProjectJMenuItem18.setEnabled(false);
        closeProjectJMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeProjectJMenuItem18ActionPerformed(evt);
            }
        });
        ontoModelMenu.add(closeProjectJMenuItem18);
        ontoModelMenu.add(jSeparator3);

        saveProjectJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveProjectJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/icon/save.png"))); // NOI18N
        saveProjectJMenuItem.setText("Save");
        saveProjectJMenuItem.setEnabled(false);
        saveProjectJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectJMenuItemActionPerformed(evt);
            }
        });
        ontoModelMenu.add(saveProjectJMenuItem);

        saveAsProject.setText("Save As...");
        saveAsProject.setEnabled(false);
        saveAsProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsProjectActionPerformed(evt);
            }
        });
        ontoModelMenu.add(saveAsProject);
        ontoModelMenu.add(jSeparator4);

        jMenuItem21.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem21.setText("Print...");
        jMenuItem21.setEnabled(false);
        ontoModelMenu.add(jMenuItem21);

        jMenuItem22.setText("Print Setup...");
        jMenuItem22.setEnabled(false);
        ontoModelMenu.add(jMenuItem22);
        ontoModelMenu.add(jSeparator5);
        ontoModelMenu.add(jSeparator6);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setText("Exit");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        ontoModelMenu.add(jMenuItem4);

        jMenuBar1.add(ontoModelMenu);

        property.setText("Настройки");
        property.setEnabled(false);

        jMenuItem1.setText("Информация о проекте");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        property.add(jMenuItem1);

        jMenuBar1.add(property);

        inport.setText("Import/Export");
        inport.setEnabled(false);
        inport.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                inportMenuSelected(evt);
            }
        });
        inport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inportActionPerformed(evt);
            }
        });

        import1.setText("Import...");

        jMenuItem23.setText("UML...");
        jMenuItem23.setEnabled(false);
        import1.add(jMenuItem23);

        jMenuItem24.setText("IDEF0...");
        jMenuItem24.setEnabled(false);
        import1.add(jMenuItem24);

        jMenuItem25.setText("OWL...");
        jMenuItem25.setEnabled(false);
        import1.add(jMenuItem25);

        impotrFromCSV.setText("csv to Taksonomy");
        impotrFromCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impotrFromCSVActionPerformed(evt);
            }
        });
        import1.add(impotrFromCSV);

        inport.add(import1);

        jMenu7.setText("Export...");

        jMenuItem26.setText("UML...");
        jMenuItem26.setEnabled(false);
        jMenu7.add(jMenuItem26);

        jMenuItem3.setText("IDF0...");
        jMenuItem3.setEnabled(false);
        jMenu7.add(jMenuItem3);

        jMenuItem27.setText("OWL...");
        jMenuItem27.setEnabled(false);
        jMenu7.add(jMenuItem27);

        exportToCSV.setText("csv from Taxonomy");
        exportToCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToCSVActionPerformed(evt);
            }
        });
        jMenu7.add(exportToCSV);

        inport.add(jMenu7);

        jMenuBar1.add(inport);

        jMenu4.setText("Help");
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        jMenuItem30.setText("Перейти на сайт...");
        jMenuItem30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem30ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem30);

        jMenuItem13.setText("О системе");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuItem14.setText("Проверить обновления");
        jMenuItem14.setEnabled(false);
        jMenu4.add(jMenuItem14);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addGap(13, 13, 13))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar4, javax.swing.GroupLayout.DEFAULT_SIZE, 1022, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dispLinejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(workJToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewjToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(workJToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(viewjToolBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dispLinejLabel)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        // Пункт меню ОнтоМодель - Открыть:
        projectOpen();
        
    }//GEN-LAST:event_OpenActionPerformed
    /**Заготовка для рисования.
     Пока неактивна.*/
   // @Override 
  //  public void paint(java.awt.Graphics g){ 
//    super.paint(g); 
    //g=jPanel1.getGraphics(); 
 
    private void CreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateActionPerformed
        // Пункт меню ОнтоМодель - Создать:
        projectCreate(jTabbedPane1);
        
    }//GEN-LAST:event_CreateActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // Пункт меню ОнтоМодель - Выход:
        exit();
                    
               
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // Пункт меню Help - О системе.
        //JOptionPane.showMessageDialog(null,"Разработчики: \n\n Козак Ирина \n Самородин Юрий", "О программе", JOptionPane.INFORMATION_MESSAGE);
         //форма выбора проекта JDialog_about
        JDialog_about dialogA = new JDialog_about(new javax.swing.JFrame(), true);
        dialogA.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void saveProjectJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectJMenuItemActionPerformed
        // Действия по нажатию кнопки меню "Save":
        MyJTabbedPane myJTabbedPaneSave = (MyJTabbedPane) this.jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
        projectSave(myJTabbedPaneSave.getMyProjectJTabbedPane());//сохраним проект из выбранной вкладки
    }//GEN-LAST:event_saveProjectJMenuItemActionPerformed

    private void saveAsProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsProjectActionPerformed
        // TODO add your handling code here:
        projectSaveAs();
    }//GEN-LAST:event_saveAsProjectActionPerformed

    private void ontoModelMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ontoModelMenuActionPerformed
        // Действие по нажатию кнопки Exit:
        //System.exit(0);
    }//GEN-LAST:event_ontoModelMenuActionPerformed

    private void strelkaUkazatelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strelkaUkazatelActionPerformed
        // Выбрана Стрелка-указатель на панели инструментов workJToolBar:
        work="Стрелка-указатель"; 
        //jLabel1.setText("pTable+ ... "+work);
        
    }//GEN-LAST:event_strelkaUkazatelActionPerformed

    private void krugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_krugActionPerformed
        // Выбран Круг на панели инструментов workJToolBar:
        work="Круг"; 
        //int l=0;//количество элементов в первом отношении.
        //if(!myProject.getMyTaksArray().getMyTaksArray().isEmpty()){
        //    l=myProject.getMyTaksArray().getMyTaksArray().get(0).getElemEllArray().getEllArray().size();
        //}
        //jLabel1.setText("pTable+ ... "+work+" "
        //        +myProject.getMyTaksArray().getMyTaksArray().size()
        //        +":"+l
        //        +"("
        //        +myProject.getMyTaksArray().getMyTaksArrayToIn().size()+")");
        
    }//GEN-LAST:event_krugActionPerformed

    private void liniyaStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_liniyaStateActionPerformed
        // Выбрана Линия на панели инструментов workJToolBar:
        work="Линия";  
                    //jLabel1.setText("pTable+ ... "+work+" "+myProject.getMyTaksArray().getMyLineArray().getLineArray().size());
              
    }//GEN-LAST:event_liniyaStateActionPerformed

    private void closeProjectJMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeProjectJMenuItem18ActionPerformed
        // Close пункт меню File:
        projectClose();
        
    }//GEN-LAST:event_closeProjectJMenuItem18ActionPerformed

    private void liniyaTaksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_liniyaTaksActionPerformed
        // Выбрана Линия1 на панели инструментов workJToolBar:
        work="Линия";  
                    //jLabel1.setText("pTable+ ... "+work+" "+myProject.getMyTaksArray().getMyLineArray().getLineArray().size());
         
    }//GEN-LAST:event_liniyaTaksActionPerformed

    private void inportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inportActionPerformed
        //System.out.println(" развернута меню импорт");
        //if(){}
    }//GEN-LAST:event_inportActionPerformed

    private void saveProjectJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectJButtonActionPerformed
        // Кнопка панели инструментов Сохранить:
        MyJTabbedPane myJTabbedPaneSave = (MyJTabbedPane) this.jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
        projectSave(myJTabbedPaneSave.getMyProjectJTabbedPane());//сохраним проект из выбранной вкладки
        System.out.println("");
    }//GEN-LAST:event_saveProjectJButtonActionPerformed

    private void openBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBottonActionPerformed
        // Пиктограмма "Открыть Основного окна":
        projectOpen();

    }//GEN-LAST:event_openBottonActionPerformed

 //} 

    private void createProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createProjectActionPerformed
        // Кнопка Панели "Создать":
        projectCreate(jTabbedPane1);
    }//GEN-LAST:event_createProjectActionPerformed

    private void liniyaComposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_liniyaComposActionPerformed
            // Выбрана liniyaCompos на панели инструментов workJToolBar:
        work="Линия";  
        //jLabel1.setText("pTable+ ... "+work+" "+myProject.getMyTaksArray().getMyLineArray().getLineArray().size());
        
    }//GEN-LAST:event_liniyaComposActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void jMenuItem30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem30ActionPerformed
        // Пункт меню Help перейти на сайт. Выполняет загрузку броузера, который выбран как броузер по-умолчанию и загружает сайт проекта.
        Desktop desktop = Desktop.getDesktop();
    try {
	URI url = new URI("http://www.idef5.com");
	desktop.browse(url);
     } catch (URISyntaxException | IOException e) {
         System.out.println("Ошибка открытия страницы http://www.idef5.com "+e);
     }
    }//GEN-LAST:event_jMenuItem30ActionPerformed

    private void timeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeActionPerformed
        // Кнопка основного окна "Показать время"
        //При нажимании - надпись кнопки меняетс на "Скрыть время"
        // Выбрана Линия на панели инструментов workJToolBar:
        work="time";  
                    //jLabel1.setText("pTable+ ... "+work+" "+myProject.getMyTaksArray().getMyLineArray().getLineArray().size());
          
        
        
    }//GEN-LAST:event_timeActionPerformed

    private void impotrFromCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impotrFromCSVActionPerformed
        // Пункт меню Импорт/import/csv для формата win1251
        

        //В меню верхнего уровня выполняется проверка на присутствие загруженного проекта.
        //Становится доступным только только для загруженного проекта. Импорт начинается в самой нижней левой точке окна с расширением вправо и вниз.
        
        //Установим настройки для выбора файла:
        fileChooserCSV.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        fileChooserCSV.setAcceptAllFileFilterUsed(true);
        //Проверим, есть ли стандартный каталог с проектами в папке с программой
        File folderDefault = new File("." + File.separator + "MyProjects");
            if (!folderDefault.exists()) {
                folderDefault.mkdir();
            }
        // Установим каталогом по-умолчанию текущий каталог с программой
        fileChooserCSV.setCurrentDirectory(new File("."));
        // Установим каталогом по-умолчанию каталог с проектами в каталоге с программой
        fileChooserCSV.setCurrentDirectory(folderDefault);
        fileChooserCSV.getCurrentDirectory();
        
        //выберем файл для открытия.
        int returnVal = fileChooserCSV.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {//если файл выбран, то
            File file = fileChooserCSV.getSelectedFile();//получим файл из формы выбора файла.
            //получим индекс открытой вкладки с проектом
            MyJTabbedPane myJTabbedPane = (MyJTabbedPane)jTabbedPane1.getSelectedComponent();
            //импортируем во вкладку Таксономии активного проекта данныефайла .csv
            if(myJTabbedPane.getMyProjectJTabbedPane().importFromCSV(file)>0){//если количество импортированных объектов больше 0, то 
                //Данные Проекта могут быть изменены, Проект требует сохранения.
                myJTabbedPane.getMyProjectJTabbedPane().setSaving(false);
            }
            
            
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_impotrFromCSVActionPerformed

    private void inportMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_inportMenuSelected
        // Выбор меню Импорт:
        //проверяем состояние Проекта и управляем доступностью пунктов меню.
        if(jTabbedPane1.getTabCount()>0){
            impotrFromCSV.setEnabled(true);
        }else{impotrFromCSV.setEnabled(false);}
        //impotrFromCSV.setEnabled(false);
    }//GEN-LAST:event_inportMenuSelected

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Пункт меню Настройки Информация о проекте:
        editProject();
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jTabbedPane1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MousePressed
        // Если мыша пресед на области с проектами:
        setInfoToolBar();
    }//GEN-LAST:event_jTabbedPane1MousePressed

    private void positionedTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionedTreeActionPerformed
        // TODO add your handling code here:
        //получим индекс открытой вкладки с проектом
        MyJTabbedPane myJTabbedPane = (MyJTabbedPane)jTabbedPane1.getSelectedComponent();
        //Узнаем какой тип отношений Проекта активен
        if(myJTabbedPane.getMyProjectJTabbedPane().getMyEnabledArray().equals("Таксономии")){
            //запустим упорядочивание для активного отношения Проекта
            myJTabbedPane.getMyProjectJTabbedPane().getMyTaksArray().ellPositionedTree();
            myJTabbedPane.getMyProjectJTabbedPane().getMyTaksArray().setResizeWindow(true);
        }
        if(myJTabbedPane.getMyProjectJTabbedPane().getMyEnabledArray().equals("Композиции")){
            //запустим упорядочивание для активного отношения Проекта
            myJTabbedPane.getMyProjectJTabbedPane().getMyComposArray().ellPositionedTree();
            myJTabbedPane.getMyProjectJTabbedPane().getMyComposArray().setResizeWindow(true);
        }
        if(myJTabbedPane.getMyProjectJTabbedPane().getMyEnabledArray().equals("Состояния")){
            //запустим упорядочивание для активного отношения Проекта
            myJTabbedPane.getMyProjectJTabbedPane().getMyStateArray().ellPositionedTree();
             myJTabbedPane.getMyProjectJTabbedPane().getMyStateArray().setResizeWindow(true);
        }
        //myJTabbedPane.getMyProjectJTabbedPane().setResizeWindow(true);
    }//GEN-LAST:event_positionedTreeActionPerformed

    private void copyJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyJButtonActionPerformed
        // TODO add your handling code here:
        //Итог. На экране выделена группа объектов. Кнопка Копировать нажата. Выделенные объекты собраны в группе класса myTaksArrayCopy.
        //Надо:
        //MyJTabbedPane myJTabbedPanePaste = (MyJTabbedPane) jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
        
        
       // if(myJTabbedPanePaste.getSelectedComponent().getComponentListeners()[0].getClass().equals(evt)){}
        //myJTabbedPanePaste.getSelectedComponent().getComponentListeners()[0];
        
        //myJTabbedPanePaste.getSelectedComponent().getComponentListeners()[0].componentShown(new AncestorListener() {});
        //Зафиксируем, что данные попали в класс копирования
        myTaksArrayCopyPassed=true;//это сигнал сформировать массив копируемых элементов и убрать выделение области копирования для Таксономии.
        myComposArrayCopyPassed=true;//это сигнал сформировать массив копируемых элементов и убрать выделение области копирования для Композиции.
        //Активируем кнопку Вставить
        MyJFrame.pastejButton.setEnabled(true);
        MyJFrame.copyJButton.setEnabled(false);
        MyJFrame.deletejButton.setEnabled(false);
        
    }//GEN-LAST:event_copyJButtonActionPerformed

    private void pastejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pastejButtonActionPerformed
        // TODO add your handling code here:
        //Получим вкладку активного проекта
        //pasteMakeGroup();
        pasteMakeGroupPassed=true;
    }//GEN-LAST:event_pastejButtonActionPerformed

    private void deletejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletejButtonActionPerformed
        // TODO add your handling code here:
        //Итог. На экране выделена группа объектов. Кнопка Удалить нажата. Выделенные объекты собраны в группе класса myTaksArrayCopy.
        //Надо:
        //MyJTabbedPane myJTabbedPaneDelete = (MyJTabbedPane) jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
        //myJTabbedPaneDelete.getComponents();
        //myJTabbedPaneDelete.getComponentCount();
        //myJTabbedPaneDelete.getComponentListeners()[0];
        
        
       // if(myJTabbedPanePaste.getSelectedComponent().getComponentListeners()[0].getClass().equals(evt)){}
        //myJTabbedPanePaste.getSelectedComponent().getComponentListeners()[0];
        
        //myJTabbedPanePaste.getSelectedComponent().getComponentListeners()[0].componentShown(new AncestorListener() {});
        //Зафиксируем, что данные попали в класс копирования
        myTaksArrayDeletePassed=true;//это сигнал сформировать массив копируемых элементов и убрать выделение области копирования для Таксономии.
        myComposArrayDeletePassed=true;//это сигнал сформировать массив копируемых элементов и убрать выделение области копирования для Композиции.
        MyJFrame.copyJButton.setEnabled(false);
        MyJFrame.deletejButton.setEnabled(false);
    }//GEN-LAST:event_deletejButtonActionPerformed

    private void exportToCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToCSVActionPerformed
        // Пункт меню Импорт/Export/csv для формата win1251
        MyJTabbedPane myJTabbedPaneSave = (MyJTabbedPane) this.jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
        try {
            projectExportToCSV(myJTabbedPaneSave.getMyProjectJTabbedPane());//выполним экспорт проекта из выбранной вкладки
        } catch (IOException ex) {
            Logger.getLogger(MyJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportToCSVActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new MyJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Create;
    private javax.swing.JMenuItem Open;
    private javax.swing.ButtonGroup buttonGroupProject;
    protected static javax.swing.JMenuItem closeProjectJMenuItem18;
    protected static javax.swing.JButton copyJButton;
    private javax.swing.JButton createProject;
    protected static javax.swing.JButton deletejButton;
    protected static javax.swing.JLabel dispLinejLabel;
    private javax.swing.JMenuItem exportToCSV;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFileChooser fileChooserCSV;
    private javax.swing.JMenu import1;
    private javax.swing.JMenuItem impotrFromCSV;
    protected static javax.swing.JMenu inport;
    private javax.swing.ButtonGroup instrumentBottonGroup;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem30;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    protected javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    protected static javax.swing.JToolBar jToolBar4;
    protected static javax.swing.JToggleButton krug;
    protected static javax.swing.JToggleButton liniyaCompos;
    protected static javax.swing.JToggleButton liniyaState;
    protected static javax.swing.JToggleButton liniyaTaks;
    private javax.swing.JMenu ontoModelMenu;
    private javax.swing.JButton openBotton;
    private javax.swing.JLabel pAvtorjLabel;
    private javax.swing.JLabel pNamejLabel;
    private javax.swing.JLabel pOblastjLabel;
    protected static javax.swing.JButton pastejButton;
    protected static javax.swing.JButton positionedTree;
    protected static javax.swing.JMenu property;
    public static javax.swing.JMenuItem saveAsProject;
    protected static javax.swing.JButton saveProjectJButton;
    public static javax.swing.JMenuItem saveProjectJMenuItem;
    protected static javax.swing.JToggleButton strelkaUkazatel;
    protected static javax.swing.JToggleButton time;
    private javax.swing.JToolBar viewjToolBar;
    private javax.swing.JToolBar workJToolBar;
    // End of variables declaration//GEN-END:variables

  
 
    /**Метод получает таблицу сводную JTabbedPane  и  экземпляр проекта для отображения в сводной таблице.
    *Добавляет вкладку нового проекта
     * @param jTabbedPane1.
     * @param project*/
    public void add_JTabbed_Project(JTabbedPane jTabbedPane1, MyProject project){
    //создадим панель вкладок Проекта 
    MyJTabbedPane tabProject = new MyJTabbedPane();
    //добавим проект к панели вкладок
    tabProject.setMyProjectJTabbedPane(project);
    //расположим названия вкладок слева
    tabProject.setTabPlacement(javax.swing.JTabbedPane.LEFT);
    
    //создали новую панель с титлом "Таксономии" в составе tabProject 
    final CustomJPanel tabProjectTaksonom = new CustomJPanel(tabProject.getMyProjectJTabbedPane(),"Таксономии");
    //если ширина tabProjectTaksonom меньше ширины отображаемого окна scrollPane, увеличим ее.
    if(windowTaks.width<jTabbedPane1.getWidth()) tabProjectTaksonom.setPreferredSize(new Dimension(windowTaks.height,jTabbedPane1.getWidth()));
    //Добавим полосу прокрутки
    final JScrollPane scrollPane = new JScrollPane(tabProjectTaksonom);
    //Добавим как вкладку Проекта Панель Прокрутки с отношениями Таксономии
    tabProject.add("Таксономии",scrollPane);
    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
   
    
    //создали новую панель с титлом "Композиции" в составе tabProject 
    final CustomJPanelComposition tabProjectComposition = new CustomJPanelComposition(tabProject.getMyProjectJTabbedPane(),"Композиции");
    //установим полосу прокрутки
    final JScrollPane scrollPaneK = new JScrollPane(tabProjectComposition);
    //Добавим как вкладку Проекта Панель Прокрутки с отношениями Композиции
    tabProject.add("Композиции",scrollPaneK);
    scrollPaneK.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    scrollPaneK.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
   
    
    
//    jTabbedPane6.setEnabled(false);
    //создали новую панель с титлом "Состояния" в составе tabProject 
    final CustomJPanelState tabProjectState = new CustomJPanelState(tabProject.getMyProjectJTabbedPane(),"Состояния");
    //установим полосу прокрутки
    final JScrollPane scrollPaneState = new JScrollPane(tabProjectState);
    //Добавим как вкладку Проекта Панель Прокрутки с отношениями Состояния
    tabProject.add("Состояния",scrollPaneState);
    scrollPaneState.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    scrollPaneState.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
   
  
            
    //Добавим окно проекта на панель проектов в конец
    jTabbedPane1.addTab(tabProject.getMyProjectJTabbedPane().getPNameFull(), tabProject);
    
    //Переберем каждую вкладку и добавим на нее для каждого проекта кнопку закрытия.
    for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
        jTabbedPane1.setTabComponentAt(i,new ButtonTabComponent(jTabbedPane1));
    }
    //Перейдем на добавленную вкладку панели проектов jTabbedPane1.getTabCount()
    jTabbedPane1.setSelectedIndex(jTabbedPane1.getTabCount()-1);
    //выведем в строку состояния название открытого проекта , его предметную область и автора
    this.setInfoToolBar();

    }

    //void paintIcon(Component c, Graphics gr, int x, int y) {
    //gr.setColor(Color.black);
    //gr.fillOval(x+100, y+100, 500, 500);
  //}

    //protected JComponent makeTextPanel(String text) {
    //    JPanel panel = new JPanel(false);
    //    JLabel filler = new JLabel(text);
   //     filler.setHorizontalAlignment(JLabel.CENTER);
    //    panel.setLayout(new GridLayout(1, 1));
    //    panel.add(filler);
    //    return panel;
    //}

    public static  String getDeystvie(){
    return deystvie;
    }
    /**Возвращает значение выбора панели пиктограмм фигур workJToolBa
     * @return r*/
    public static String getWork(){
        return work;
    }
    
    
 /**выведем в строку состояния название открытого проекта , его предметную область и автора*/ 
       private void setInfoToolBar(){
           //Если на экране есть окна с проектами
        if(jTabbedPane1.getTabCount()>0){
            MyJTabbedPane myJTabbedPaneInfo = (MyJTabbedPane) this.jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
            this.pNamejLabel.setText(myJTabbedPaneInfo.getMyProjectJTabbedPane().getPName());// имя открытого проекта в строке состояния
            this.pOblastjLabel.setText(myJTabbedPaneInfo.getMyProjectJTabbedPane().getPOblast());//предметная область открытого проекта в строке состояния
            this.pAvtorjLabel.setText(myJTabbedPaneInfo.getMyProjectJTabbedPane().getPAvtor());//автор открытого проекта в строке состояния
        }
       
    }
    /**Экспортируем данные Таксономии Проекта в файл .CS
     * @param myProjectExportCSV*/
    public void projectExportToCSV(MyProject  myProjectExportCSV) throws IOException{
        //установить титл окна
        fileChooser.setDialogTitle("Выбор папки для экспорта "+myProjectExportCSV.getPName()+"в файл .CSV ");
        //saveProjectJButton.setEnabled(false);
        //  Для выбора директории:
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new MyCustomFilterCSV());
        //JFileChooser позволял выбирать каталог, т.е. не позволить юзеру вводить имя файла(вообще запретить редактировать это поле)? 
        fileChooser.setMultiSelectionEnabled(false);
         // Установим каталогом по-умолчанию тот каталог в котором был взят файл сохраненных данных текущего проекта
         if(myProjectExportCSV.getPPath()!=null&myProjectExportCSV.getPPath().length()>0){
             fileChooser.setCurrentDirectory(new File(myProjectExportCSV.getPPath()));
         }
        fileChooser.setCurrentDirectory(new File(myProjectExportCSV.getPPath()));
        int returnVal = fileChooser.showSaveDialog(App.myJFrame);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();//получим путь сохранения файла из формы выбора папки для сохранения файла.
            String savePatch=file.getPath()+File.separator ;//подправим полученный путь.
            //Сформируем имя файла для сохранения.
            String fileName = savePatch+"_"+myProjectExportCSV.getPName()+"_"+myProjectExportCSV.getPOblast()+"_"+myProjectExportCSV.getPAvtor()+".csv";
            myProjectExportCSV.setpFileName(fileName);
            File fileSave= new File(fileName);
            if(fileSave.exists()){//если файл с таким именем существует в выбранной папке
                //Спросим что делать у пользователя.
                int reply = JOptionPane.showConfirmDialog(null, "Таки перезаписать ?", "Внимание!", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION){
                   //Сохраним проект в выбранной директории.
                    if(myProjectExportCSV.exportProjectToCSV(fileSave)){
                    
                        //myProjectSave.setSaving(true);//сообщим Проекту что он сохранен
                        return;
                    }else{
                        System.out.println(" Ошибка экспорта в .csv файл!");
                    }
                }
            }else{//если файл с таким именем не существует в выбранной папке
                //Сохраним проект в выбранной директории.
                if(myProjectExportCSV.exportProjectToCSV(fileSave)){
                    //myProjectSave.setSaving(true);//сообщим Проекту что он сохранен
                    
                }else{
                    System.out.println(" Ошибка экспорта в .csv файл!");
                }
            }
        }
        //  Вернем настройки для выбора файла:
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.setAcceptAllFileFilterUsed(true);
    }   
    /**Сохраним данные проекта в файл
     * @param myProjectSave.*/
    public void projectSave(MyProject  myProjectSave){
        //установить титл окна
        fileChooser.setDialogTitle("Выбор папки для сохранения Проекта  " +  myProjectSave.getPName()+"("+myProjectSave.getPOblast()+")("+myProjectSave.getPAvtor()+")");
        //saveProjectJButton.setEnabled(false);
        //  Для выбора директории:
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new MyCustomFilter());
        //JFileChooser позволял выбирать каталог, т.е. не позволить юзеру вводить имя файла(вообще запретить редактировать это поле)? 
        fileChooser.setMultiSelectionEnabled(false);
         // Установим каталогом по-умолчанию тот каталог в котором был взят файл сохраненных данных текущего проекта
         if(myProjectSave.getPPath()!=null&myProjectSave.getPPath().length()>0){
             fileChooser.setCurrentDirectory(new File(myProjectSave.getPPath()));
         }
        fileChooser.setCurrentDirectory(new File(myProjectSave.getPPath()));
        int returnVal = fileChooser.showSaveDialog(App.myJFrame);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();//получим путь сохранения файла из формы выбора папки для сохранения файла.
            String savePatch=file.getPath()+File.separator ;//подправим полученный путь.
            //Сформируем имя файла для сохранения.
            String fileName = savePatch+"_"+myProjectSave.getPName()+"_"+myProjectSave.getPOblast()+"_"+myProjectSave.getPAvtor()+".i5";
            myProjectSave.setpFileName(fileName);
            File fileSave= new File(fileName);
            if(fileSave.exists()){//если файл с таким именем существует в выбранной папке
                //Спросим что делать у пользователя.
                int reply = JOptionPane.showConfirmDialog(null, "Таки перезаписать ?", "Внимание!", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION){
                   //Сохраним проект в выбранной директории.
                    if(myProjectSave.saveProjectToFile(savePatch)){
                    
                        myProjectSave.setSaving(true);//сообщим Проекту что он сохранен
                        return;
                    }else{
                        System.out.println(" Ошибка записи файла!");
                    }
                }
            }else{//если файл с таким именем не существует в выбранной папке
                //Сохраним проект в выбранной директории.
                if(myProjectSave.saveProjectToFile(savePatch)){
                    myProjectSave.setSaving(true);//сообщим Проекту что он сохранен
                    
                }else{
                    System.out.println(" Ошибка записи файла!");
                }
            }
        }
        //  Вернем настройки для выбора файла:
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.setAcceptAllFileFilterUsed(true);
    }
    /**создадим новый проект из существующего.
     Изменим шапку - название, предметную область и автора.
     Данные скопируем из существующего проекта.*/
    private void projectSaveAs(){
        
        //выделим проект для сохранения (активный проект)
        MyJTabbedPane myJTabbedPaneSave = (MyJTabbedPane) App.myJFrame.jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
        MyProject first= new MyProject();
        first.setMyProject(myJTabbedPaneSave.getMyProjectJTabbedPane());
        //Создадим новый проект
        JDialog_SaveAsProject dialog = new JDialog_SaveAsProject(new javax.swing.JFrame(), true,first.getPName(),first.getPOblast(),first.getPAvtor(),App.myJFrame.jTabbedPane1);
        dialog.setTitle("Сохранить как...");
        dialog.setLocationRelativeTo(App.myJFrame);//открываем dialog по центру окна myJFrame
        dialog.setVisible(true);
        //Если создание проекта не отменено
        if(dialog.getNewProject()){
            //создадим папку для сохранения проектов и поместим ее в  папку, откуда была запущена программы.
            File folder = new File("." + File.separator + "MyProjects");
            if (!folder.exists()) {
                folder.mkdir();
            }
            first.setPPath(folder.getAbsolutePath());
            first.setPName(dialog.getProektP().getText());
            first.setPOblast(dialog.getOblastP().getText());
            first.setPAvtor(dialog.getAvtorP().getText());
            //сохраним новый проект
            projectSave(first);//сохраним проект из выбранной вкладки
            //закроем старый проект(сохраним или нет, пусть решает пользователь)
            projectClose();
            //сохраним во временной переменной полное имя и путь сохранения.
            String fileTemp=first.getpFileName();
            //откроем новый проект
            projectOpen(fileTemp);
            //перейдем на вкладку добавленного проекта
            App.myJFrame.jTabbedPane1.setSelectedIndex(App.myJFrame.jTabbedPane1.getTabCount()-1);
            //выведем в строку состояния название открытого проекта , его предметную область и автора
            this.setInfoToolBar();
        }
        
        
        //закроем вкладку и откроем ее заново
    } 
    /***/
    private void projectOpen(){
    
    //установить титл окна
    fileChooser.setDialogTitle("Открыть проект IDEF5");
    
        //  Установим настройки для выбора файла:
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.setFileFilter(new MyCustomFilter());
        //Проверим, есть ли стандартный каталог с проектами в папке с программой
        File folderDefault = new File("." + File.separator + "MyProjects");
            if (!folderDefault.exists()) {
                folderDefault.mkdir();
            }
        // Установим каталогом по-умолчанию текущий каталог с программой
        //fileChooser.setCurrentDirectory(new File("."));
        /// Установим каталогом по-умолчанию каталог с проектами в каталоге с программой
        fileChooser.setCurrentDirectory(folderDefault);
        //fileChooser.getCurrentDirectory();
        
        //выберем файл для открытия.
        int returnVal = fileChooser.showOpenDialog(App.myJFrame);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {//если файл выбран, то
            File file = fileChooser.getSelectedFile();//получим файл из формы выбора файла.
            //System.out.println("file= "+file.getName());
            //создадим проект, 
            MyProject mProject=new MyProject();
            //заполним его шапку, откроем его данные.
            mProject.importFromFile(file);//получим данные проекта.
            //Если в Массиве открытых проектов нет проекта с названием как у нового проекта, добавим его
            //Иначе, сообщим пользователю, что проект с таким именем уже открыт
            for (int i = 0; i < App.myJFrame.jTabbedPane1.getTabCount(); i++) {
                if(mProject.getPNameFull().equals(App.myJFrame.jTabbedPane1.getTitleAt(i))){
                    JOptionPane.showMessageDialog(null," Проект с  именем "+mProject.getPNameFull()+" уже открыт");
                    //System.out.println("jTabbedPane1.getComponent(i).getName();= "+jTabbedPane1.getTitleAt(i));
                    return;
                }
            }
            
            //    for (MyProject myProject : app.App.myProjectArray) {
            //        if(myProject.getPName().equals(mProject.getPName())){
            //            JOptionPane.showMessageDialog(null," Проект с таким именем уже открыт");
            //           return;
            //       }
            //   }
            //добавим открываемый проект в массив открытых проектов
            //boolean add = app.App.myProjectArray.add(mProject);
            //добавим выбранный проект как актуальный проект на экран
            App.myJFrame.add_JTabbed_Project(App.myJFrame.jTabbedPane1,mProject);
            //выведем в строку состояния название открытого проекта , его предметную область и автора
            //this.setInfoToolBar();
            //mProject.setResizeWindow(true);//подгоним размер экрана под расположенные данные
                    
            //CustomJPanel.changed=true;//подберем размер окон проекта под размер данных
            
            
        } else {
            System.out.println("File access cancelled by user.");
        }
    }
    private void projectOpen(String fileName){
        //выберем файл для открытия.
         {//если файл выбран, то
            File file = new File(fileName);//получим файл из формы выбора файла.
            //System.out.println("file= "+file.getName());
            //создадим проект, 
            MyProject mProject=new MyProject();
            //заполним его шапку, откроем его данные.
            mProject.importFromFile(file);//получим данные проекта.
            //Если в Массиве открытых проектов нет проекта с названием как у нового проекта, добавим его
            //Иначе, сообщим пользователю, что проект с таким именем уже открыт
            //выведем окно для выбора действий: переоткрыть сохраненный файл или отменить открытие.
            //Переберем каждую вкладку и добавим на нее для каждого проекта кнопку закрытия.
            for (int i = 0; i < App.myJFrame.jTabbedPane1.getTabCount(); i++) {
                if(mProject.getPName().equals(App.myJFrame.jTabbedPane1.getTitleAt(i))){
                    JOptionPane.showMessageDialog(null," Проект с  именем "+mProject.getPName()+" уже открыт");
                    //System.out.println("jTabbedPane1.getComponent(i).getName();= "+jTabbedPane1.getTitleAt(i));
                    return;
                }
            
            }
            
            //    for (MyProject myProject : app.App.myProjectArray) {
            //        if(myProject.getPName().equals(mProject.getPName())){
            //            JOptionPane.showMessageDialog(null," Проект с таким именем уже открыт");
            //           return;
            //       }
            //   }
            //добавим открываемый проект в массив открытых проектов
            //boolean add = app.App.myProjectArray.add(mProject);
            //добавим выбранный проект как актуальный проект на экран
            //myProject=mProject;
            App.myJFrame.add_JTabbed_Project(App.myJFrame.jTabbedPane1,mProject);
            //выведем в строку состояния название открытого проекта , его предметную область и автора
            //this.setInfoToolBar();
            CustomJPanel.changed=true;//подберем размер окон проекта под размер данных
            
            
        }
    }
    
    /**Создаем новый проект, заполняем его шапку и добавляем как новую вкладку на панель.
     Проверим, что проекта с таким же именем нет среди открытых проектов.*/
    private void projectCreate(JTabbedPane jTabbedPane1){
        //форма ввола начальных данных о проекте.
        //По-умолчанию, Название проекта - пробник, Предметная область - все материаллы, Автор - герой.
        JDialog_CreateProject dialog = new JDialog_CreateProject(new javax.swing.JFrame(), true,"","","",jTabbedPane1);
        dialog.setLocationRelativeTo(null);//разместим форму по центру экрана
        dialog.setVisible(true);
        //Если создание проекта не отменено
        if(dialog.getNewProject()){
            //создадим папку для сохранения проектов и поместим ее в  папку, откуда была запущена программы.
            File folder = new File("." + File.separator + "MyProjects");
            if (!folder.exists()) {
                folder.mkdir();
            }
            dialog.getmyProject().setPPath(folder.getAbsolutePath());
            //добавим созданный проект в массив открытых проектов
           //app.App.myProjectArray.add(dialog.getmyProject());
            //добавим созданный проект на экран
            App.myJFrame.add_JTabbed_Project(App.myJFrame.jTabbedPane1,dialog.getmyProject());
            //перейдем на вкладку добавленного проекта
            App.myJFrame.jTabbedPane1.setSelectedIndex(App.myJFrame.jTabbedPane1.getTabCount()-1);
        }
    }
    private void exit(){
        boolean doSave=false;//если среди открытых проектов найден хоть один, который надо сохранить
        if(jTabbedPane1.getTabCount()>0){
            //Надо узнать, есть ли среди открытых проектов несохраненные
            for (int i1 = 0; i1 < jTabbedPane1.getTabCount(); i1++){
            jTabbedPane1.setSelectedIndex(i1);
                    MyJTabbedPane myJTabbedPaneSave = (MyJTabbedPane) jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
                    
                    if(!myJTabbedPaneSave.getMyProjectJTabbedPane().isSaving()){
                        doSave=true;//сохраним проект из выбранной вкладки
                    }
            }
            if(doSave){
                int i=JOptionPane.showConfirmDialog(null, "Есть несохраненные проекты. Их сохранить? ","Выход из "+App.name+" "+App.release,1);
                if(i==0){
                    //Переберем каждую вкладку и если необходимо сохраним открытые Проекты.
                    for (int i1 = 0; i1 < jTabbedPane1.getTabCount(); i1++) {
                        jTabbedPane1.setSelectedIndex(i1);
                        MyJTabbedPane myJTabbedPaneSave = (MyJTabbedPane) jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
                        if(!myJTabbedPaneSave.getMyProjectJTabbedPane().isSaving()){
                            projectSave(myJTabbedPaneSave.getMyProjectJTabbedPane());//сохраним проект из выбранной вкладки
                        }
                    }
                     System.exit(0);
                }
                if (i==1){System.exit(0);}
            }else{System.exit(0);}
        }else{System.exit(0);}
        
    }

    public static MyTaksArray getMyTaksArrayCopy() {
        return myTaksArrayCopy;
    }

    public static void setMyTaksArrayCopy(MyTaksArray myTaksArrayCopy) {
        MyJFrame.myTaksArrayCopy = myTaksArrayCopy;
    }
    /**Вставим скопированный объекты в активный проект*/
    private  void pasteMakeGroup(){
        //вставим скопированные объекты из вкладки Таксономии, Если они там есть.
        if(MyJFrame.myTaksArrayCopy.getPaintTaksEll().size()>0){//если есть скопированные эллипсы
            MyJTabbedPane myJTabbedPanePaste = (MyJTabbedPane) jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
            //добавим эллипсы
            for(MyEll myEll:MyJFrame.myTaksArrayCopy.getPaintTaksEll()){
                myJTabbedPanePaste.getMyProjectJTabbedPane().getMyTaksArray().unique(
                        myJTabbedPanePaste.getMyProjectJTabbedPane().getMyTaksArray().getPaintTaksEll(), myEll);
            }
            //добавим линии
            for(MyLine myLine:MyJFrame.myTaksArrayCopy.getMyLineArray().getLineArray()){//Смотрим каждую скопированную линию
                //Если между эллипсами Проекта с текстом начала и конца линии есть линия, 
                //увеличим счетчик линий на величину счетчика вставляемой линии.
                //Иначе, рисуем новую линию между ними.
                myJTabbedPanePaste.getMyProjectJTabbedPane().getMyTaksArray().uniqueMyLinePlus(
                        myJTabbedPanePaste.getMyProjectJTabbedPane().getMyTaksArray().getMyLineArray().getLineArray(), myLine);
            }
            //MyJFrame.myTaksArrayCopy=new MyTaksArray(); //обнулим массив скопированных объектов.
            //MyJFrame.myTaksArrayCopyPassed=false; //установим индикатор наличия скопированных данных Туксономии в False.
            //MyJFrame.pastejButton.setEnabled(false);//установим кнопку вставки скопированной группы в False
        }
        //вставим скопированные объекты из вкладки Композиции, Если 
        if(MyJFrame.myComposArrayCopy.getPaintEll().size()>0){//если есть скопированные эллипсы
            MyJTabbedPane myJTabbedPanePaste = (MyJTabbedPane) jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
            //добавим эллипсы
            for(MyEll myEll:MyJFrame.myComposArrayCopy.getPaintEll()){
                myJTabbedPanePaste.getMyProjectJTabbedPane().getMyComposArray().unique(
                        myJTabbedPanePaste.getMyProjectJTabbedPane().getMyComposArray().getPaintEll(), myEll);
            }
            //добавим линии
            for(MyLine myLine:MyJFrame.myComposArrayCopy.getMyLineArray().getLineArray()){
                myJTabbedPanePaste.getMyProjectJTabbedPane().getMyComposArray().uniqueMyLinePlus(
                        myJTabbedPanePaste.getMyProjectJTabbedPane().getMyComposArray().getMyLineArray().getLineArray(), myLine);
            }
            
        }
    //MyJFrame.myComposArrayCopy=new MyComposArray();  
    //MyJFrame.myComposArrayCopyPassed=false; //установим индикатор наличия скопированных данных Композиции в False.
    //MyJFrame.pastejButton.setEnabled(false);//установим кнопку вставки скопированной группы в False
    }

    public static MyComposArray getMyComposArrayCopy() {
        return myComposArrayCopy;
    }

    public static void setMyComposArrayCopy(MyComposArray myComposArrayCopy) {
        MyJFrame.myComposArrayCopy = myComposArrayCopy;
    }
    public void editProject(){
        
        JDialog_EditProject dialogEdit = new JDialog_EditProject(new javax.swing.JFrame(), true,jTabbedPane1);
        dialogEdit.setLocationRelativeTo(this);//открываем dialogEdit по центру окна myJFrame
        dialogEdit.setVisible(true);
        MyJTabbedPane myJTabbedPaneEdit = (MyJTabbedPane) this.jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
        if(dialogEdit.isEditProject()){
            //Сохраним текст полей измененной шапки Проекта
            myJTabbedPaneEdit.getMyProjectJTabbedPane().setPName(dialogEdit.getProektP().getText());
            myJTabbedPaneEdit.getMyProjectJTabbedPane().setPOblast(dialogEdit.getOblastP().getText());
            myJTabbedPaneEdit.getMyProjectJTabbedPane().setPAvtor(dialogEdit.getAvtorP().getText());
            myJTabbedPaneEdit.getMyProjectJTabbedPane().setPNameFull();
            //Изменим титл окна Проекта
            this.jTabbedPane1.setTitleAt(jTabbedPane1.getSelectedIndex(),myJTabbedPaneEdit.getMyProjectJTabbedPane().getPNameFull());
            
            //обновим титл проекта и описание в строке информации
            
            //Перейдем на добавленную вкладку панели проектов jTabbedPane1.getTabCount()
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex());
            //System.out.println("  ***---*** "+jTabbedPane1.getTitleAt(jTabbedPane1.getSelectedIndex()));
                    
            //выведем в строку состояния название открытого проекта , его предметную область и автора
            this.setInfoToolBar();
            
            if (dialogEdit.getEditProject()){//если данные в свойствах проекта изменены, то
                //установим флаг что данные проекта отличаются от сохраненных
                myJTabbedPaneEdit.getMyProjectJTabbedPane().setSaving(false);
            }
           
            //выровняем текст в титле вкладке по левому краю(и расширим область титла по-возможности)
            //jTabbedPane1.setTabPlacement(JTabbedPane.TOP);
            //jTabbedPane1.requestFocus();
            //myJTabbedPaneEdit..getMyProjectJTabbedPane().set
            //процедура сохранение изменений в файле проекта
            //{
            //    projectSave(myJTabbedPaneEdit.getMyProjectJTabbedPane());//сохраним проект из выбранной вкладки
            //    //удалим вкладку старой версии проекта с панели открытых проектов
            //    jTabbedPane1.remove(jTabbedPane1.getSelectedIndex());
            //    projectOpen(myJTabbedPaneEdit.getMyProjectJTabbedPane().getpFileName());//загрузим изменненный проект на панель проектов
            //}
            
        }
    }
    public void projectClose(){
        int select = jTabbedPane1.getSelectedIndex();
        if (select >= 0) {
            //При выборе закрыть вкладку кликнув на ее крестике, выполним метод сохранения Проекта, 
            //который проверит необходимость сохранения проекта (если были изменения) и сохранит при необходимости.
            MyJTabbedPane myJTabbedPaneSave = (MyJTabbedPane) jTabbedPane1.getSelectedComponent();//получим выбранную вкладку с проектом
            if(!myJTabbedPaneSave.getMyProjectJTabbedPane().isSaving()){
                App.myJFrame.projectSave(myJTabbedPaneSave.getMyProjectJTabbedPane());//сохраним проект из выбранной вкладки
            }
            jTabbedPane1.removeTabAt(select);
        }
    }
}



